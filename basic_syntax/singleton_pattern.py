"""
created by nzh
Date: 2019/1/26 1:25 PM
"""

# 实现一个单例模式
# 所谓的"单例"，其实就是在程序中只存在一个这样的对象。
# 那么为什么需要单例模式呢？它有哪些应用场景呢？
# 举个例子，比如我们有一个应用的配置类，就叫它AppConfig吧，如果我们需要在不同的地方对AppConfig类
# 的属性做修改，那么我们需要在每次修改的地方都实例化AppConfig类，那么就会有多个实例，我们如何确保读取的
# 配置信息都来自于同一个实例呢？显然很难保证。所以，出现了单例模式，让我们只针对一个实例操作。
# 典型的使用不仅仅是应用的配置信息，还有线程池，缓存，日志，注册表等等。

# 然后说说单例模式的实现方式：
# 1.python模块
# 在python中，一个模块在第一次导入时会产生一个pyc文件，在第二次导入时会直接加载pyc文件，也就是说不会
# 再次执行这个python模块了，所以，我们只要把相关内容定义在一个模块中就是可以实现单例模式。
# 在使用的时候只需要导入这个模块即可。

# 2.使用装饰器实现单例
# 实现思路：创建一个函数，把一个类作为参数传入函数，在函数的内部创建一个变量(理解为私有变量吧),
# 这个变量是一个字典，然后在函数内容再创建一个函数，用来检测_instance变量中是否存在某个类的实例。
# 如果某个类在字典中有实例，那么直接返回实例，如果没有则创建一个实例。
# 这样就保证了一种类型的类只有一个实例。
def singleton(cls):
    _instance = {}

    def _singleton(*args, **kwargs):
        if cls not in _instance:
            _instance[cls] = cls(*args, **kwargs)
        return _instance[cls]
    return _singleton

@singleton
class A:
    def __init__(self, x=0):
        self.x = x


a1 = A(5)
print(a1.x)

a2 = A(2)
print(a2.x)




